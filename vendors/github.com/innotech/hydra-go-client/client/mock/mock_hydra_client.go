// Automatically generated by MockGen. DO NOT EDIT!
// Source: hydra_client.go

package mock_client

import (
	gomock "github.com/innotech/hydra-reverse-proxy/vendors/github.com/innotech/hydra-go-client/vendors/code.google.com/p/gomock/gomock"
)

// Mock of Client interface
type MockClient struct {
	ctrl		*gomock.Controller
	recorder	*_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) Get(serviceId string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "Get", serviceId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockClient) GetHydraServers() []string {
	ret := _m.ctrl.Call(_m, "GetHydraServers")
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockClientRecorder) GetHydraServers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHydraServers")
}

func (_m *MockClient) GetShortcuttingTheCache(serviceId string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetShortcuttingTheCache", serviceId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetShortcuttingTheCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetShortcuttingTheCache", arg0)
}

func (_m *MockClient) IsHydraAvailable() bool {
	ret := _m.ctrl.Call(_m, "IsHydraAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockClientRecorder) IsHydraAvailable() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsHydraAvailable")
}

func (_m *MockClient) ReloadHydraServiceCache() {
	_m.ctrl.Call(_m, "ReloadHydraServiceCache")
}

func (_mr *_MockClientRecorder) ReloadHydraServiceCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReloadHydraServiceCache")
}

func (_m *MockClient) ReloadServicesCache() {
	_m.ctrl.Call(_m, "ReloadServicesCache")
}

func (_mr *_MockClientRecorder) ReloadServicesCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReloadServicesCache")
}

func (_m *MockClient) SetHydraAvailable(available bool) {
	_m.ctrl.Call(_m, "SetHydraAvailable", available)
}

func (_mr *_MockClientRecorder) SetHydraAvailable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetHydraAvailable", arg0)
}

func (_m *MockClient) SetMaxNumberOfRetries(numberOfRetries int) {
	_m.ctrl.Call(_m, "SetMaxNumberOfRetries", numberOfRetries)
}

func (_mr *_MockClientRecorder) SetMaxNumberOfRetries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMaxNumberOfRetries", arg0)
}

func (_m *MockClient) SetWaitBetweenAllServersRetry(millisecondsToRetry int) {
	_m.ctrl.Call(_m, "SetWaitBetweenAllServersRetry", millisecondsToRetry)
}

func (_mr *_MockClientRecorder) SetWaitBetweenAllServersRetry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWaitBetweenAllServersRetry", arg0)
}
