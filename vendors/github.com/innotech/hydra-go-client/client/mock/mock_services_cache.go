// Automatically generated by MockGen. DO NOT EDIT!
// Source: services_cache.go

package mock_client

import (
	gomock "github.com/innotech/hydra-reverse-proxy/vendors/github.com/innotech/hydra-go-client/vendors/code.google.com/p/gomock/gomock"
)

// Mock of ServiceCache interface
type MockServiceCache struct {
	ctrl		*gomock.Controller
	recorder	*_MockServiceCacheRecorder
}

// Recorder for MockServiceCache (not exported)
type _MockServiceCacheRecorder struct {
	mock *MockServiceCache
}

func NewMockServiceCache(ctrl *gomock.Controller) *MockServiceCache {
	mock := &MockServiceCache{ctrl: ctrl}
	mock.recorder = &_MockServiceCacheRecorder{mock}
	return mock
}

func (_m *MockServiceCache) EXPECT() *_MockServiceCacheRecorder {
	return _m.recorder
}

func (_m *MockServiceCache) Exists(serviceId string) bool {
	ret := _m.ctrl.Call(_m, "Exists", serviceId)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockServiceCacheRecorder) Exists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exists", arg0)
}

func (_m *MockServiceCache) FindById(serviceId string) []string {
	ret := _m.ctrl.Call(_m, "FindById", serviceId)
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockServiceCacheRecorder) FindById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindById", arg0)
}

func (_m *MockServiceCache) GetIds() []string {
	ret := _m.ctrl.Call(_m, "GetIds")
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockServiceCacheRecorder) GetIds() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIds")
}

func (_m *MockServiceCache) PutService(serviceId string, servers []string) {
	_m.ctrl.Call(_m, "PutService", serviceId, servers)
}

func (_mr *_MockServiceCacheRecorder) PutService(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutService", arg0, arg1)
}

func (_m *MockServiceCache) Refresh(newAppserverCache map[string][]string) {
	_m.ctrl.Call(_m, "Refresh", newAppserverCache)
}

func (_mr *_MockServiceCacheRecorder) Refresh(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Refresh", arg0)
}

func (_m *MockServiceCache) RemoveServer(serviceId string, serverToRemove string) {
	_m.ctrl.Call(_m, "RemoveServer", serviceId, serverToRemove)
}

func (_mr *_MockServiceCacheRecorder) RemoveServer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveServer", arg0, arg1)
}
