// Automatically generated by MockGen. DO NOT EDIT!
// Source: services_repository.go

package mock_client

import (
	gomock "github.com/innotech/hydra-reverse-proxy/vendors/github.com/innotech/hydra-go-client/vendors/code.google.com/p/gomock/gomock"
)

// Mock of ServiceRepository interface
type MockServiceRepository struct {
	ctrl		*gomock.Controller
	recorder	*_MockServiceRepositoryRecorder
}

// Recorder for MockServiceRepository (not exported)
type _MockServiceRepositoryRecorder struct {
	mock *MockServiceRepository
}

func NewMockServiceRepository(ctrl *gomock.Controller) *MockServiceRepository {
	mock := &MockServiceRepository{ctrl: ctrl}
	mock.recorder = &_MockServiceRepositoryRecorder{mock}
	return mock
}

func (_m *MockServiceRepository) EXPECT() *_MockServiceRepositoryRecorder {
	return _m.recorder
}

func (_m *MockServiceRepository) FindById(id string, servers []string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "FindById", id, servers)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRepositoryRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindById", arg0, arg1)
}

func (_m *MockServiceRepository) FindByIds(ids []string, servers []string) (map[string][]string, error) {
	ret := _m.ctrl.Call(_m, "FindByIds", ids, servers)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRepositoryRecorder) FindByIds(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindByIds", arg0, arg1)
}

func (_m *MockServiceRepository) SetMaxNumberOfRetries(numberOfRetries int) {
	_m.ctrl.Call(_m, "SetMaxNumberOfRetries", numberOfRetries)
}

func (_mr *_MockServiceRepositoryRecorder) SetMaxNumberOfRetries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMaxNumberOfRetries", arg0)
}

func (_m *MockServiceRepository) SetWaitBetweenAllServersRetry(millisecondsToRetry int) {
	_m.ctrl.Call(_m, "SetWaitBetweenAllServersRetry", millisecondsToRetry)
}

func (_mr *_MockServiceRepositoryRecorder) SetWaitBetweenAllServersRetry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWaitBetweenAllServersRetry", arg0)
}
